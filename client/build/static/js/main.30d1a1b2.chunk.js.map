{"version":3,"sources":["Components/Navbar.tsx","Components/Checkbox.tsx","Components/Rides/RideCards.tsx","Components/Popup.tsx","Components/Map/Renderers/Circle.tsx","Components/Map/Renderers/Points.tsx","Components/Map/Renderers/Circles.tsx","assets/CustomLeafletHotline.js","assets/renderers.tsx","Components/Map/Renderers/useCanvas.tsx","Components/Map/Renderers/Hotline.tsx","Components/Map/Renderers/Line.tsx","Components/Map/Renderers/Rectangles.tsx","Components/Rides/MeasPopup.tsx","Components/Rides/MetaData.tsx","assets/fetch.tsx","Components/Map/Measurements.tsx","Components/Rides/RideDetails.tsx","Components/Rides/Chart.tsx","Components/Map/EventPath.tsx","Components/Map/Ride.tsx","Components/Map/MapEvents.tsx","Components/Map/MapWrapper.tsx","Components/Rides/Rides.tsx","Components/Login/SignUpForm.tsx","Components/Pages/LiraMain/Map/Measurement.tsx","Components/Pages/LiraMain/Map/Measurements.tsx","Components/Pages/LiraMain/Map/MapEvents.tsx","Components/Pages/LiraMain/Map/Map.tsx","Components/Pages/LiraMain/LiRAMain.tsx","Components/Machine/ML.tsx","App.tsx","index.js"],"names":["Rides","className","activeClassName","to","Checkbox","props","forceState","html","onClick","useState","isChecked","setChecked","undefined","update","range","n","Array","from","length","elt","i","rangeBool","fill","Cards","metas","showMetas","checked","useEffect","width","height","rowHeight","rowRenderer","index","key","style","meta","TaskId","Date","Created_Date","toLocaleDateString","updated","rowCount","useInput","min","max","current","value","setValue","type","onChange","e","target","RideCards","searched","setSearched","sorted","setSorted","startMonth","startMonthInput","startYear","startYearInput","endMonth","endMonthInput","endYear","endYearInput","setShowMetas","search","setSearch","getOrderedMD","reverse","filter","startStreetName","JSON","parse","StartPositionDisplay","street_name","endStreetName","EndPositionDisplay","isNaN","parseInt","includes","toString","before","getTime","after","date","filterDate","clearFilter","placeholder","swal","withReactContent","Swal","usePopup","options","fire","customClass","popup","title","createCircle","lat","lng","properties","Circle","center","radius","size","weight","boldness","opacity","color","eventHandlers","RCircle","path","data","pos","Points","PointElt","map","point","Math","random","CCircle","Circles","L","Hotline","latlngs","canvas","this","_canvas","document","getElementById","_ctx","getContext","_width","_height","_weight","_weightFunc","_outlineWidth","_outlineColor","_min","_max","_data","palette","prototype","weightFunc","outlineWidth","outlineColor","createElement","ctx","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","_palette","getImageData","add","push","draw","globalCompositeOperation","lineCap","_drawOutline","_drawHotline","getRGBForValue","valueRelative","paletteIndex","floor","getWeight","j","dataLength","pathLength","pointStart","pointEnd","lineWidth","strokeStyle","beginPath","moveTo","x","y","lineTo","stroke","gradientStartRGB","gradientEndRGB","console","log","z","join","Renderer","Canvas","extend","_initContainer","call","_hotline","_container","_update","_updatePoly","layer","_drawing","parts","_parts","_updateOptions","renderer","Browser","Util","clipSegment","a","b","bounds","useLastCode","round","codeOut","p","newCode","codeA","_lastCode","LineUtil","_getBitCode","codeB","_getEdgeIntersection","Polyline","statics","_renderer","_projectLatlngs","result","projectedBounds","ring","flat","LatLng","len","_map","latLngToLayerPoint","alt","_clipPoints","noClip","_rings","k","len2","segment","points","_bounds","_clickTolerance","touch","RendererName","useCanvas","useMap","addTo","removeFrom","coords","minValue","maxValue","onclick","Line","way","positions","pathOptions","CRectangle","LatLngBounds","Rectangle","Rectangles","renderers","PopupWrapper","updateName","updateTag","updateSelected","updateColor","defaultOptions","setRenderer","setColor","changeSelect","rendererName","defaultValue","name","tag","Object","keys","textTransform","onChangeComplete","hex","triangle","useMeasPopup","callback","showCancelButton","cancelButtonColor","confirmButtonText","val","then","isConfirmed","newMeasurement","query","queryMeasurement","footer","icon","timer","timerProgressBar","DATE_MD","POSITION_MD","BANNED_MD","formatDate","getDate","getMonth","getFullYear","getHours","getMinutes","MetaData","md","elts","setElts","newElts","entries","flatMap","baseElt","mappedPos","isSublist","getMDelt","get","fetch","res","json","post","obj","axios","params","put","useMeasurements","measurements","setMeasurements","RideDetails","measurementClick","addChecked","setAddChecked","openEditMeasurement","preventDefault","stopPropagation","m","prev","measurement","getMeasurementsContent","strokeWidth","circles","Chart","setAddChartData","setRemChartData","series","setSeries","addChartData","dataName","threshold","ceil","chartData","removeChartData","chart","id","animations","enabled","curve","toolTip","shared","xaxis","position","tickAmount","labels","formatter","timestamp","opts","Number","parseFloat","theme","mode","parseMD","mds","isArray","getPopupLine","EventPath","metadata","markerPos","setMarkerPos","selected","setSelected","EventRenderer","latlng","Marker","getEmptyPath","loaded","fullPath","ZOOMS","Ride","activeMeasurements","tripId","taskId","paths","setPaths","request","setRequest","useMapEvents","zoom","pushRequestForAll","dragend","worker","Worker","submitWork","minLength","postMessage","pushRequest","req","getMinLength","getMapBounds","getBounds","getNorthWest","getSouthEast","northWest","southEast","deltaLat","deltaLng","mappedZoom","getZoom","precision","sqrt","getDataName","onmessage","pathsCopy","performancePath","pathsCp","newPath","requestMeasurement","measIndex","meas","tripID","latLngData","d","lon","minTime","maxTime","pushRequestForOne","forEach","include","MapEvents","click","MapWrapper","children","MapContainer","preferCanvas","scrollWheelZoom","TileLayer","attribution","url","setActiveMeasurements","setMetas","selectedRides","setSelectedRides","remChartData","removed","r","TripId","SignUpForm","username","email","password","state","setState","handleChange","event","prevState","history","useHistory","htmlFor","status","Measurement","maxval","minval","green","red","getColor","message","getValue","Measurements","latestZoom","maxrendered","zoomend","southWest","getSouthWest","northEast","getNorthEast","maxlon","maxlat","minlon","minlat","response","zoomstart","Map","LiRAMain","ML","selectedPaths","setSelectedPaths","ws","WebSocket","onopen","send","payload","filename","tripName","replace","temp","file","App","Navbar","exact","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.30d1a1b2.chunk.js","sourcesContent":["import { FC } from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nimport '../css/navbar.css';\r\n\r\n\r\n\r\nconst Rides: FC = () => {\r\n        \r\n    return (\r\n        <div className=\"nav-wrapper\">\r\n            <div className=\"nav-container\">\r\n                <div className=\"nav-block\">\r\n                    <NavLink className=\"nav-tab\" activeClassName=\"nav-tab-active\" to=\"/rides\">RIDES</NavLink>\r\n                    <NavLink className=\"nav-tab\" activeClassName=\"nav-tab-active\" to=\"/ml\">Machine</NavLink>\r\n                </div>\r\n                <div className=\"nav-block\">\r\n                    <NavLink className=\"nav-tab right-tab\" activeClassName=\"nav-tab-active\" to=\"/login\">LOGIN</NavLink>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rides;\r\n","import { useState } from \"react\";\n\ninterface Props {\n\tforceState?: boolean;\n\tclassName: string;\n\thtml: JSX.Element;\n  \tonClick: (isChecked: boolean) => void;\n}\n\nconst Checkbox = (props: Props) => {\n\tconst { forceState, className, html, onClick } = props;\n  \tconst [ isChecked, setChecked ] = useState<boolean>(forceState || false)\t\n\t  \t\n  \treturn (\n        <div \n            className={`${className} btn ${(forceState === undefined ? isChecked : forceState) ? 'btn-checked' : ''}`} \n            onClick={() => { \t\n\t\t\t\tconst update = forceState === undefined ? !isChecked : !forceState\t\t\t\t\t\t\t\t\n\t\t\t\tonClick( update ); \n\t\t\t\tsetChecked( update ); \n\t\t\t}}>\n\t\t\t{html}\n        </div>\n  \t);\n};\nexport default Checkbox;","import { FC, useEffect, useState, ReactNode } from \"react\";\nimport { List, ListRowRenderer } from \"react-virtualized\";\n\nimport Checkbox from '../Checkbox';\n\nimport { RideMeta } from '../../assets/models'\n\nimport '../../css/ridecard.css'\n\ninterface Props {\n    metas: RideMeta[];\n    onClick: (i: number, isChecked: boolean) => void;\n}\n\nconst range = (n: number): number[] => { \n    return Array.from( {length: n}, (elt, i) => i);\n}\n\nconst rangeBool = (n: number): boolean[] => { \n    return new Array(n).fill(false);\n}\n\ninterface CardsProps {\n    metas: RideMeta[]\n    showMetas: number[]\n    onClick: (i: number, isChecked: boolean) => void; \n}\n\nconst Cards: FC<CardsProps> = ( { metas, showMetas, onClick } ) => {  \n    \n    // necessary because react-virtualized doesn't save the state of the elements that are not rendered\n    const [ checked, setChecked ] = useState<boolean[]>(rangeBool(showMetas.length))\n\n    useEffect( () => {        \n        if ( checked.length === 0 )\n            setChecked(rangeBool(showMetas.length))  \n    }, [checked.length])    \n\n    const renderRow: ListRowRenderer = ( { index, key, style } ): ReactNode => {\n        const n = showMetas[index];\n        const meta = metas[n];\n        return <div key={key} style={style}>\n            <Checkbox \n                forceState={checked[n]}\n                className=\"ride-card-container\"\n                html={<div><b>{meta.TaskId}</b><br></br>{new Date(meta.Created_Date).toLocaleDateString()}</div>}\n                onClick={(isChecked) => {\n                    const updated = [...checked]\n                    updated[n] = isChecked;\n                    setChecked(updated)\n                    onClick(n, isChecked) \n                }} />\n        </div>\n    }\n\n    return <List\n        width={170}\n        height={2500}\n        rowHeight={61}\n        rowRenderer={renderRow}\n        rowCount={showMetas.length} /> \n}\n\ninterface InputProps {\n    min: number, max: number, current: number;\n}\n\nconst useInput = ( { min, max, current }: InputProps ) => {\n    const [value, setValue] = useState<number>(current);\n    const input = <input \n        type='number' min={min} max={max} value={value} \n        onChange={(e: any) => setValue(e.target.value as number)} \n        className=\"ride-search-input ride-search-date-input\" />;\n    return [value, input];\n  }\n\nconst RideCards: FC<Props> = ( { metas, onClick } ) => {                \n    const [ searched, setSearched ] = useState<boolean>(false)\n    const [ sorted, setSorted ] = useState<boolean>(true)\n\n    const [ startMonth, startMonthInput ] = useInput( { min: 1, max: 12, current: 1 } )\n    const [ startYear, startYearInput ] = useInput( { min: 2019, max: 2050, current: 2019 } )\n    const [ endMonth, endMonthInput ] = useInput( { min: 1, max: 12, current: 12 } )\n    const [ endYear, endYearInput ] = useInput( { min: 2019, max: 2050, current: 2021 } )\n\n    const [ showMetas, setShowMetas ] = useState<number[]>([]);\n    const [ search, setSearch ] = useState<string>(\"\")\n\n    const getOrderedMD = () => {\n        return sorted ? range(metas.length) : range(metas.length).reverse()\n    }\n\n    const changeOrder = (isChecked: boolean) => {\n        setSorted(!isChecked)\n        setShowMetas([...showMetas].reverse())\n    }\n    \n    \n    useEffect( () => {\n        setShowMetas(range(metas.length))\n    }, [metas])\n\n    useEffect( () => {  \n        const filterSearch = (): number[] => {\n            return searched \n                ? getOrderedMD().filter( (n: number) => {\n                    const startStreetName: string = JSON.parse(metas[n].StartPositionDisplay).street_name\n                    const endStreetName: string = JSON.parse(metas[n].EndPositionDisplay).street_name\n                    \n                    return isNaN(parseInt(search))\n                        ? (\n                            (startStreetName !== undefined && startStreetName.includes(search)) ||\n                            (endStreetName   !== undefined && endStreetName.includes(search))\n                        )\n                        : metas[n].TaskId.toString().includes(search)\n                 } ) \n                : getOrderedMD()\n        }\n\n        setShowMetas(filterSearch())\n    }, [searched, search, metas] )\n\n    useEffect( () => {\n        const filterDate = () => {\n            const before = new Date(startYear as number, startMonth as number - 1).getTime()\n            const after = new Date(endYear as number, endMonth as number - 1).getTime()\n    \n            return getOrderedMD().filter( (n: number) => {\n                const date = new Date(metas[n].Created_Date).getTime()\n                return date >= before && date <= after \n            })\n        }\n\n        setShowMetas(filterDate())\n    }, [startMonth, endMonth, startYear, endYear, metas])\n\n\n    const clearFilter = () => {\n        setSearch('')\n        setSearched(false)\n    }\n    \n    const onFilterInput = (e: any) => {\n        if ( e.target.value === '')\n            return clearFilter()\n\n        setSearch(e.target.value)\n        setSearched(true)\n    }\n\n    return (\n        <div className=\"ride-list\">\n\n            <div className=\"ride-search-container\">\n                <input \n                    className=\"ride-search-input\" \n                    placeholder='Search..' \n                    value={search} \n                    onChange={onFilterInput} />\n                <div \n                    className=\"ride-search-cross\" \n                    onClick={clearFilter}>X</div>\n            </div>\n            <div className=\"ride-search-container\">\n                { startMonthInput }\n                { startYearInput }\n            </div>\n            <div className=\"ride-search-container\">\n                { endMonthInput }\n                { endYearInput }\n            </div>\n\n            <Checkbox \n                className=\"ride-sort-cb\"\n                html={<div>Sort {sorted ? '▲' : '▼'}</div>}\n                onClick={changeOrder}/>\n\n            <Cards metas={metas} showMetas={showMetas} onClick={onClick} />            \n        </div>\n    )\n}\n\nexport default RideCards;\n","import Swal, { SweetAlertOptions, SweetAlertResult } from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nimport '@sweetalert2/theme-dark';\n\nconst swal = withReactContent(Swal)\n\nconst usePopup = () => {\n    return ( options: SweetAlertOptions<any, any> ): Promise<SweetAlertResult<any>> => {\n        return swal.fire( { ...options, customClass: { popup: 'sweetalert-popup', title: 'sweetalert-title'} } )\n    }\n}\n\nexport default usePopup\n","import { FC } from \"react\";\nimport { Circle } from \"react-leaflet\";\nimport { EventRenderer, PathEventHandler, PathProperties, Renderer } from \"../../../assets/models\";\n\n/*\n    Circle as Renderer \n*/\n\nexport const createCircle = (lat: number, lng: number, properties: PathProperties, onClick: (e: any) => void) => {\n    return <Circle\n        center={[lat, lng]} \n        radius={properties.size} \n        weight={properties.boldness || 4}\n        opacity={properties.opacity || 1.0}\n        color={properties.color}\n        eventHandlers={{'click': onClick}}/>\n}\n\nconst RCircle: EventRenderer = ( { path, properties, onClick } ) =>  {   \n    const { lat, lng } = path.data[0].pos\n    return createCircle(lat, lng, properties, onClick(0))\n}\n\nexport default RCircle;","\nimport { FC } from \"react\";\n\nimport { PointData, PointProps, EventRendererProps } from \"../../../assets/models\";\n\ninterface Props extends EventRendererProps {\n    PointElt: FC<PointProps>\n}\n\n/*\n    Used to render Rectangles and Circles\n*/\nconst Points: FC<Props> = ( { path, properties, onClick, PointElt } ) => {\n    return (\n        <>\n        {\n            path.data.map( (point: PointData, i: number) => {\n                return <PointElt \n                    key={`PointElt${Math.random()}`}\n                    pos={point.pos} \n                    properties={properties} \n                    onClick={onClick}\n                    i={i} />\n            } )\n        }\n        </>\n    )\n}\n\nexport default Points;","\n\nimport { FC } from \"react\";\nimport { Circle } from 'react-leaflet'\n\nimport { EventRenderer, PointProps } from \"../../../assets/models\";\nimport { createCircle } from \"./Circle\";\nimport Points from \"./Points\";\n\nconst Circles: EventRenderer = ( props ) => {\n    return <Points {...props} PointElt={CCircle} />\n}\n\nconst CCircle: FC<PointProps> = ( { pos, properties, onClick, i } ) =>  {    \n    return createCircle(pos.lat, pos.lng, properties, onClick(i))\n}\n\nexport default Circles;\n\n","/*\n (c) 2017, iosphere GmbH\n Leaflet.hotline, a Leaflet plugin for drawing gradients along polylines.\n https://github.com/iosphere/Leaflet.hotline/\n*/\nimport L from 'leaflet'\n\nL.Hotline = function (latlngs, options) {\n\t// Plugin is already added to Leaflet\n\t// if (L.Hotline) {\n\t// \treturn L;\n\t// }\n\n\t/**\n\t * Core renderer.\n\t * @constructor\n\t * @param {HTMLElement | string} canvas - &lt;canvas> element or its id\n\t * to initialize the instance on.\n\t */\n\tvar Hotline = function (canvas) {\n\t\tif (!(this instanceof Hotline)) { return new Hotline(canvas); }\n\n\t\tvar defaultPalette = {\n\t\t\t0.0: 'green',\n\t\t\t0.5: 'yellow',\n\t\t\t1.0: 'red'\n\t\t};\n\n\t\tthis._canvas = canvas = typeof canvas === 'string'\n\t\t\t? document.getElementById(canvas)\n\t\t\t: canvas;\n\n\t\tthis._ctx = canvas.getContext('2d');\n\t\tthis._width = canvas.width;\n\t\tthis._height = canvas.height;\n\n\t\tthis._weight = 5;\n\t\tthis._weightFunc = undefined\n\t\tthis._outlineWidth = 1;\n\t\tthis._outlineColor = 'black';\n\n\t\tthis._min = 0;\n\t\tthis._max = 1;\n\n\t\tthis._data = [];\n\n\t\tthis.palette(defaultPalette);\n\t};\n\n\tHotline.prototype = {\n\t\t/**\n\t\t * Sets the width of the canvas. Used when clearing the canvas.\n\t\t * @param {number} width - Width of the canvas.\n\t\t */\n\t\twidth: function (width) {\n\t\t\tthis._width = width;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the height of the canvas. Used when clearing the canvas.\n\t\t * @param {number} height - Height of the canvas.\n\t\t */\n\t\theight: function (height) {\n\t\t\tthis._height = height;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the weight of the path.\n\t\t * @param {number} weight - Weight of the path in px.\n\t\t */\n\t\tweight: function (weight) {\n\t\t\tthis._weight = weight;\n\t\t\treturn this;\n\t\t},\n\n\n\t\t/**\n\t\t * Sets the weight function for the path.\n\t\t * @param {(i: number) => number} weightFunc - Weight Function for the path in px.\n\t\t */\n\t\t weightFunc: function (weightFunc) {\n\t\t\tthis._weightFunc = weightFunc;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the width of the outline around the path.\n\t\t * @param {number} outlineWidth - Width of the outline in px.\n\t\t */\n\t\toutlineWidth: function (outlineWidth) {\n\t\t\tthis._outlineWidth = outlineWidth;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the color of the outline around the path.\n\t\t * @param {string} outlineColor - A CSS color value.\n\t\t */\n\t\toutlineColor: function (outlineColor) {\n\t\t\tthis._outlineColor = outlineColor;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the palette gradient.\n\t\t * @param {Object.<number, string>} palette  - Gradient definition.\n\t\t * e.g. { 0.0: 'white', 1.0: 'black' }\n\t\t */\n\t\tpalette: function (palette) {\n\t\t\tvar canvas = document.createElement('canvas'),\n\t\t\t\t\tctx = canvas.getContext('2d'),\n\t\t\t\t\tgradient = ctx.createLinearGradient(0, 0, 0, 256);\n\n\t\t\tcanvas.width = 1;\n\t\t\tcanvas.height = 256;\n\n\t\t\tfor (var i in palette) {\n\t\t\t\tgradient.addColorStop(i, palette[i]);\n\t\t\t}\n\n\t\t\tctx.fillStyle = gradient;\n\t\t\tctx.fillRect(0, 0, 1, 256);\n\n\t\t\tthis._palette = ctx.getImageData(0, 0, 1, 256).data;\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the value used at the start of the palette gradient.\n\t\t * @param {number} min\n\t\t */\n\t\tmin: function (min) {\n\t\t\tthis._min = min;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the value used at the end of the palette gradient.\n\t\t * @param {number} max\n\t\t */\n\t\tmax: function (max) {\n\t\t\tthis._max = max;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * A path to rander as a hotline.\n\t\t * @typedef Array.<{x:number, y:number, z:number}> Path - Array of x, y and z coordinates.\n\t\t */\n\n\t\t/**\n\t\t * Sets the data that gets drawn on the canvas.\n\t\t * @param {(Path|Path[])} data - A single path or an array of paths.\n\t\t */\n\t\tdata: function (data) {\n\t\t\tthis._data = data;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Adds a path to the list of paths.\n\t\t * @param {Path} path\n\t\t */\n\t\tadd: function (path) {\n\t\t\tthis._data.push(path);\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Draws the currently set paths.\n\t\t */\n\t\tdraw: function () {\n\t\t\tvar ctx = this._ctx;\n\n\t\t\tctx.globalCompositeOperation = 'source-over';\n\t\t\tctx.lineCap = 'round';\n\n\t\t\tthis._drawOutline(ctx);\n\t\t\tthis._drawHotline(ctx);\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Gets the RGB values of a given z value of the current palette.\n\t\t * @param {number} value - Value to get the color for, should be between min and max.\n\t\t * @returns {Array.<number>} The RGB values as an array [r, g, b]\n\t\t */\n\t\tgetRGBForValue: function (value) {\n\t\t\tvar valueRelative = Math.min(Math.max((value - this._min) / (this._max - this._min), 0), 0.999);\n\t\t\tvar paletteIndex = Math.floor(valueRelative * 256) * 4;\n\n\t\t\treturn [\n\t\t\t\tthis._palette[paletteIndex],\n\t\t\t\tthis._palette[paletteIndex + 1],\n\t\t\t\tthis._palette[paletteIndex + 2]\n\t\t\t];\n\t\t},\n\n\t\tgetWeight: function (i) {\n\t\t\treturn this._weightFunc ? this._weightFunc(i) : this._weight\n\t\t},\n\n\t\t/**\n\t\t * Draws the outline of the graphs.\n\t\t * @private\n\t\t */\n\t\t_drawOutline: function (ctx) {\n\t\t\tvar i, j, dataLength, path, pathLength, pointStart, pointEnd;\n\n\t\t\tif (this._outlineWidth) {\n\t\t\t\tfor (i = 0, dataLength = this._data.length; i < dataLength; i++) {\n\t\t\t\t\tpath = this._data[i];\n\n\t\t\t\t\tfor (j = 1, pathLength = path.length; j < pathLength; j++) {\n\t\t\t\t\t\tpointStart = path[j - 1];\n\t\t\t\t\t\tpointEnd = path[j];\n\n\t\t\t\t\t\tctx.lineWidth = this.getWeight(j - 1) + 2 * this._outlineWidth;\n\n\t\t\t\t\t\tctx.strokeStyle = this._outlineColor;\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo(pointStart.x, pointStart.y);\n\t\t\t\t\t\tctx.lineTo(pointEnd.x, pointEnd.y);\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Draws the color encoded hotline of the graphs.\n\t\t * @private\n\t\t */\n\t\t_drawHotline: function (ctx) {\n\t\t\tvar i, j, dataLength, path, pathLength, pointStart, pointEnd,\n\t\t\t\t\tgradient, gradientStartRGB, gradientEndRGB;\n\n\t\t\tfor (i = 0, dataLength = this._data.length; i < dataLength; i++) {\n\t\t\t\tpath = this._data[i];\n\t\t\t\tconsole.log(path);\n\n\t\t\t\tfor (j = 1, pathLength = path.length; j < pathLength; j++) {\n\t\t\t\t\tpointStart = path[j - 1];\n\t\t\t\t\tpointEnd = path[j];\n\n\t\t\t\t\tctx.lineWidth = this.getWeight(j - 1)\n\n\t\t\t\t\t// Create a gradient for each segment, pick start end end colors from palette gradient\n\t\t\t\t\tgradient = ctx.createLinearGradient(pointStart.x, pointStart.y, pointEnd.x, pointEnd.y);\n\t\t\t\t\tgradientStartRGB = this.getRGBForValue(pointStart.z);\n\t\t\t\t\tgradientEndRGB = this.getRGBForValue(pointEnd.z);\n\t\t\t\t\tgradient.addColorStop(0, 'rgb(' + gradientStartRGB.join(',') + ')');\n\t\t\t\t\tgradient.addColorStop(1, 'rgb(' + gradientEndRGB.join(',') + ')');\n\n\t\t\t\t\tctx.strokeStyle = gradient;\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.moveTo(pointStart.x, pointStart.y);\n\t\t\t\t\tctx.lineTo(pointEnd.x, pointEnd.y);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar Renderer = L.Canvas.extend({\n\t\t_initContainer: function () {\n\t\t\tL.Canvas.prototype._initContainer.call(this);\n\t\t\tthis._hotline = new Hotline(this._container);\n\t\t},\n\n\t\t_update: function () {\n\t\t\tL.Canvas.prototype._update.call(this);\n\t\t\tthis._hotline.width(this._container.width);\n\t\t\tthis._hotline.height(this._container.height);\n\t\t},\n\n\t\t_updatePoly: function (layer) {\n\t\t\tif (!this._drawing) { return; }\n\n\t\t\tvar parts = layer._parts;\n\n\t\t\tif (!parts.length) { return; }\n\n\t\t\tthis._updateOptions(layer);\n\n\t\t\tconsole.log(parts, layer);\n\n\t\t\tthis._hotline\n\t\t\t\t.data(parts)\n\t\t\t\t.draw();\n\t\t},\n\n\t\t_updateOptions: function (layer) {\n\t\t\tif (layer.options.min != null) {\n\t\t\t\tthis._hotline.min(layer.options.min);\n\t\t\t}\n\t\t\tif (layer.options.max != null) {\n\t\t\t\tthis._hotline.max(layer.options.max);\n\t\t\t}\n\t\t\tif (layer.options.weight != null) {\n\t\t\t\tthis._hotline.weight(layer.options.weight);\n\t\t\t}\n\t\t\tif (layer.options.weightFunc != null) {\n\t\t\t\tthis._hotline.weightFunc(layer.options.weightFunc);\n\t\t\t}\n\t\t\tif (layer.options.outlineWidth != null) {\n\t\t\t\tthis._hotline.outlineWidth(layer.options.outlineWidth);\n\t\t\t}\n\t\t\tif (layer.options.outlineColor != null) {\n\t\t\t\tthis._hotline.outlineColor(layer.options.outlineColor);\n\t\t\t}\n\t\t\tif (layer.options.palette) {\n\t\t\t\tthis._hotline.palette(layer.options.palette);\n\t\t\t}\n\t\t}\n\t});\n\n\tvar renderer = function (options) {\n\t\treturn L.Browser.canvas ? new Renderer(options) : null;\n\t};\n\n\n\tvar Util = {\n\t\t/**\n\t\t * This is just a copy of the original Leaflet version that support a third z coordinate.\n\t\t * @see {@link http://leafletjs.com/reference.html#lineutil-clipsegment|Leaflet}\n\t\t */\n\t\tclipSegment: function (a, b, bounds, useLastCode, round) {\n\t\t\tvar codeA = useLastCode ? this._lastCode : L.LineUtil._getBitCode(a, bounds),\n\t\t\t\t\tcodeB = L.LineUtil._getBitCode(b, bounds),\n\t\t\t\t\tcodeOut, p, newCode;\n\n\t\t\t// save 2nd code to avoid calculating it on the next segment\n\t\t\tthis._lastCode = codeB;\n\n\t\t\twhile (true) {\n\t\t\t\t// if a,b is inside the clip window (trivial accept)\n\t\t\t\tif (!(codeA | codeB)) {\n\t\t\t\t\treturn [a, b];\n\t\t\t\t// if a,b is outside the clip window (trivial reject)\n\t\t\t\t} else if (codeA & codeB) {\n\t\t\t\t\treturn false;\n\t\t\t\t// other cases\n\t\t\t\t} else {\n\t\t\t\t\tcodeOut = codeA || codeB;\n\t\t\t\t\tp = L.LineUtil._getEdgeIntersection(a, b, codeOut, bounds, round);\n\t\t\t\t\tnewCode = L.LineUtil._getBitCode(p, bounds);\n\n\t\t\t\t\tif (codeOut === codeA) {\n\t\t\t\t\t\tp.z = a.z;\n\t\t\t\t\t\ta = p;\n\t\t\t\t\t\tcodeA = newCode;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp.z = b.z;\n\t\t\t\t\t\tb = p;\n\t\t\t\t\t\tcodeB = newCode;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\treturn L.Polyline.extend({\n\t\tstatics: {\n\t\t\tRenderer: Renderer,\n\t\t\trenderer: renderer\n\t\t},\n\n\t\toptions: {\n\t\t\trenderer: renderer(),\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tpalette: {\n\t\t\t\t0.0: 'green',\n\t\t\t\t0.5: 'yellow',\n\t\t\t\t1.0: 'red'\n\t\t\t},\n\t\t\tweight: 5,\n\t\t\toutlineColor: 'black',\n\t\t\toutlineWidth: 1\n\t\t},\n\n\t\tgetRGBForValue: function (value) {\n\t\t\treturn this._renderer._hotline.getRGBForValue(value);\n\t\t},\n\n\t\t/**\n\t\t * Just like the Leaflet version, but with support for a z coordinate.\n\t\t */\n\t\t_projectLatlngs: function (latlngs, result, projectedBounds) {\n\t\t\tvar flat = latlngs[0] instanceof L.LatLng,\n\t\t\t\t\tlen = latlngs.length,\n\t\t\t\t\ti, ring;\n\n\t\t\tif (flat) {\n\t\t\t\tring = [];\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tring[i] = this._map.latLngToLayerPoint(latlngs[i]);\n\t\t\t\t\t// Add the altitude of the latLng as the z coordinate to the point\n\t\t\t\t\tring[i].z = latlngs[i].alt;\n\t\t\t\t\tprojectedBounds.extend(ring[i]);\n\t\t\t\t}\n\t\t\t\tresult.push(ring);\n\t\t\t} else {\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\tthis._projectLatlngs(latlngs[i], result, projectedBounds);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Just like the Leaflet version, but uses `Util.clipSegment()`.\n\t\t */\n\t\t_clipPoints: function () {\n\t\t\tif (this.options.noClip) {\n\t\t\t\tthis._parts = this._rings;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._parts = [];\n\n\t\t\tvar parts = this._parts,\n\t\t\t\t\tbounds = this._renderer._bounds,\n\t\t\t\t\ti, j, k, len, len2, segment, points;\n\n\t\t\tfor (i = 0, k = 0, len = this._rings.length; i < len; i++) {\n\t\t\t\tpoints = this._rings[i];\n\n\t\t\t\tfor (j = 0, len2 = points.length; j < len2 - 1; j++) {\n\t\t\t\t\tsegment = Util.clipSegment(points[j], points[j + 1], bounds, j, true);\n\n\t\t\t\t\tif (!segment) { continue; }\n\n\t\t\t\t\tparts[k] = parts[k] || [];\n\t\t\t\t\tparts[k].push(segment[0]);\n\n\t\t\t\t\t// if segment goes out of screen, or it's the last one, it's the end of the line part\n\t\t\t\t\tif ((segment[1] !== points[j + 1]) || (j === len2 - 2)) {\n\t\t\t\t\t\tparts[k].push(segment[1]);\n\t\t\t\t\t\tk++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_clickTolerance: function () {\n\t\t\treturn this.options.weight / 2 + this.options.outlineWidth + (L.Browser.touch ? 10 : 0);\n\t\t}\n\t});\n\n\t// L.hotline = function (latlngs, options) {\n\t// \treturn new L.Hotline(latlngs, options);\n\t// };\n};\n","\nimport { EventRenderer, Renderer } from './models'\nimport Circles from '../Components/Map/Renderers/Circles';\nimport Hotline from '../Components/Map/Renderers/Hotline';\nimport Hotpoints from '../Components/Map/Renderers/Hotpoints';\nimport Line from '../Components/Map/Renderers/Line';\nimport Rectangles from '../Components/Map/Renderers/Rectangles';\nimport CCircle from '../Components/Map/Renderers/Circle';\n\nexport enum RendererName {\n    circle = 'circle',\n    circles = 'circles', \n    rectangles = 'rectangles',\n    line = 'line',\n    hotline = 'hotline',\n    hotpoints = 'hotpoints'\n}\n\nconst renderers: Partial<Record<RendererName, Renderer | EventRenderer>> = {\n    'circle': CCircle,\n    'circles': Circles,\n    'rectangles': Rectangles,\n    'line': Line,\n    'hotline': Hotline,\n    'hotpoints': Hotline,\n}\n\nexport default renderers;","\nimport L from 'leaflet'\nimport { useEffect } from 'react';\nimport { useMap } from \"react-leaflet\";\n\n\n\nconst useCanvas = (): [L.Map, L.Canvas] => {\n    const map = useMap()\n    const canvas = L.canvas({});\n\n    useEffect( () => {\n        canvas.addTo(map)\n        return () => { canvas.removeFrom(map) }\n    }, [])\n\n    return [map, canvas];\n}\n\nexport default useCanvas","\nimport L from 'leaflet'\n// import 'leaflet-hotline'\nimport '../../../assets/CustomLeafletHotline';\nimport 'Leaflet.MultiOptionsPolyline'\nimport { PolylineOptions, PolylineOptionsFn } from 'Leaflet.MultiOptionsPolyline';\nimport { FC, useEffect } from 'react';\n\nimport { EventRendererProps, PathProperties, PointData } from \"../../../assets/models\";\nimport useCanvas from './useCanvas';\n\ninterface HotlineProps extends EventRendererProps {\n    palette?: any\n}\n\nconst range = (n: number): number[] => { \n    return Array.from( {length: n}, (elt, i) => i);\n}\n\nconst getColor = (val: any): string => {\n    const red: number = Math.min(val * 2, 1) * 255;\n    const green: number = (val < 0.5 ? val +  0.5 : 2 - val * 2) * 255;                 \n    return `rgb(${Math.round(red)}, ${Math.round(green)}, 0)`\n    // return `rgb(${i * 255}, 0, 0)`\n}\n\nconst getOptions = (length: number, properties: PathProperties): PolylineOptions[] | PolylineOptionsFn => {\n    const weight = (properties.boldness || properties.size) + 3\n    const dilatationFactor = properties.dilatation || 1\n    const dilatation = (i: number) => 1 // Math.pow((i + length) / length, dilatationFactor)\n\n    return range(length)\n        .map(i => { return {\n            color: getColor(i / length),\n            weight: weight * dilatation(i),\n            smoothFactor: 0,\n            lineJoin: 'bevel',\n            lineCap: 'butt'\n        } } )\n}\n\nconst Hotline: FC<HotlineProps> = ( { path, properties, palette, onClick } ) => {\n\n    const [map, canvas] = useCanvas();\n\n    useEffect(() => {\n        const p = palette || {\n            0.0: 'green',\n            0.5: 'yellow',\n            1.0: 'red'\n        }\n\n        const colorThresholds = 50\n\n        // the Z value determines the color\n        const coords: [number, number, number][] = path.data\n            .map( (point: PointData) => [point.pos.lat, point.pos.lng, point.value || 0])\n\n        console.log(L.Hotline);\n\n        const hl = L.Hotline( coords, {\n            weight: 4,\n            weightFunc: (i: number) => {\n                const formula = ((i * 3) / coords.length) + 4\n                // console.log(i, formula);\n                return formula\n            },\n            outlineWidth: 0,\n            palette: p,\n            min: path.minValue || 0,\n            max: path.maxValue || 1,\n            onclick: onClick(0)\n        } )\n        const hl2 = new hl( coords, {\n            weight: 4,\n            weightFunc: (i: number) => {\n                const formula = ((i * 3) / coords.length) + 4\n                // console.log(i, formula);\n                return formula\n            },\n            outlineWidth: 0,\n            palette: p,\n            min: path.minValue || 0,\n            max: path.maxValue || 1,\n            onclick: onClick(0)\n        } );\n        hl2.addTo(map)\n        // hl.addTo(map);\n        \n        // L.multiOptionsPolyline( path.data.map( p => p.pos ), {\n        //     multiOptions: {\n        //         optionIdxFn: function (latLng, prev, i) {\n        //             const mappedValue = ((path.data[i].value || -9999) - (path.minValue || 0)) / ((path.maxValue || 1) - (path.minValue || 0))\n        //             const a = Math.round(mappedValue * (colorThresholds - 1));\n        //             return a\n        //         },\n        //         options: getOptions(colorThresholds, properties),\n        //     },\n        //     opacity: properties.opacity || 1.0,\n        // }).addTo(map);\n    }, [])\n\n    return <></>;\n}\n\nexport default Hotline;","\n\nimport { Polyline } from 'react-leaflet'\n\nimport { EventRenderer, PointData } from \"../../../assets/models\";\n\n\nconst Line: EventRenderer = ( { path, properties, onClick } ) => {\n    \n    const way = path.data.map((p: PointData) =>  p.pos ) \n\n    return <Polyline \n        positions={way} \n        key={`${Math.random()}-line`}\n        pathOptions={{ \n            color: properties.color,\n            weight: properties.boldness || properties.size,\n            opacity: properties.opacity || 1.0\n        }} \n        eventHandlers={{'click': onClick(0)}} />\n}\n\n\nexport default Line;","\nimport { FC } from \"react\";\nimport { Rectangle } from \"react-leaflet\";\nimport { LatLngBounds } from 'leaflet'\n\nimport { EventRenderer, PointProps, Renderer } from \"../../../assets/models\";\nimport Points from \"./Points\";\n\n\nconst Rectangles: EventRenderer = ( props ) => {\n    return <Points {...props} PointElt={CRectangle}/>\n}\n\nconst CRectangle: FC<PointProps> = ( { pos, properties, onClick, i } ) => {\n\n    const size: number = properties.size / 10_000;\n    const bounds: LatLngBounds = new LatLngBounds(\n        [pos.lat - size / 2, pos.lng - size / 2],\n        [pos.lat + size / 3, pos.lng + size / 1.2]\n    );\n        \n    return <Rectangle\n        bounds={bounds} \n        color={properties.color}\n        weight={properties.boldness || 4}\n        opacity={properties.opacity || 1.0}\n        eventHandlers={{'click': onClick(i)}}/>\n}\n\nexport default Rectangles\n","\n\nimport { useState } from \"react\";\n\nimport Checkbox from \"../Checkbox\";\nimport usePopup from \"../Popup\";\nimport Renderers, { RendererName } from \"../../assets/renderers\";\nimport { TwitterPicker, Color, ColorResult } from 'react-color';\nimport { Measurement, Renderer } from \"../../assets/models\";\nimport renderers from \"../../assets/renderers\";\n\ninterface PopupOptions {\n    name: string,\n    tag: string,\n    renderer: RendererName,\n    color: string\n}\n\ninterface PopupWrapperProps {\n    updateName: (val: string) => void;\n    updateTag: (val: string) => void;\n    updateSelected: (val: RendererName) => void;\n    updateColor: (val: string) => void;\n    defaultOptions: PopupOptions;\n}\n\nconst PopupWrapper = ( { updateName, updateTag, updateSelected, updateColor, defaultOptions }: PopupWrapperProps ) => {\n\n    const [renderer, setRenderer] = useState<RendererName>(defaultOptions.renderer);\n    const [ color, setColor ] = useState<Color>(defaultOptions.color)\n\n    const changeName = (e: any) => {                \n        updateName(e.target.value) \n    } \n\n    const changeTag = (e: any) => {                \n        updateTag(e.target.value) \n    } \n\n    const changeSelect = (rendererName: RendererName) => (isChecked: boolean) => { \n        setRenderer( rendererName );\n        updateSelected( rendererName )  \n    }\n\n    const changeColor = (color: ColorResult) => {\n        setColor(color.hex);\n        updateColor(color.hex);\n    }\n\n    return <div className=\"popup-wrapper\">    \n        <input className=\"sweetalert-input\" placeholder=\"Name..\" type='text' defaultValue={defaultOptions.name} onChange={changeName}/>\n        <input className=\"sweetalert-input\" placeholder=\"Tag..\" type='text' defaultValue={defaultOptions.tag} onChange={changeTag}/>\n        <div className=\"sweetalert-checkboxes\">\n            { Object.keys(renderers).map( (rendererName: string, i: number) => \n                <Checkbox \n                    key={`sweetalert-checkbox-${i}`}\n                    className='ride-metadata-checkbox'\n                    html={<div style={{textTransform: \"capitalize\"}}>{rendererName}</div>}\n                    forceState={renderer === rendererName}\n                    onClick={changeSelect(rendererName as RendererName)} />\n            ) }\n        </div>\n        <TwitterPicker color={color} onChangeComplete={changeColor} triangle={\"hide\"}/>\n    </div>\n}\n\nconst DEFAULT_COLOR = '#bb55dd'\n\n\nconst useMeasPopup = () => {\n\n    const popup = usePopup()\n\n    return { fire: ( callback: (measurement: Measurement | undefined) => void, options: PopupOptions) => {\n\n        popup( {\n            title: <p>Enter the name of your measurement and its tag<br/>(ex: obd.rpm, acc.xyz)</p>,\n            showCancelButton: true,\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Add',\n            html: <PopupWrapper \n                defaultOptions={options}\n                updateName={(val: string) => (options.name = val)}\n                updateTag={(val: string) => (options.tag = val)}\n                updateSelected={(val: RendererName) => (options.renderer = val)} \n                updateColor={(val: string) => (options.color = val)}/>,\n        } )\n        .then( (result: any) => {\n            if ( !result.isConfirmed )\n                return callback( undefined )\n\n            const newMeasurement: Measurement = {\n                renderer: options.renderer,\n                query: '/trip_measurement',\n                queryMeasurement: options.tag,\n                name: options.name,\n                color: options.color,\n                size: 1,\n                value: 'number'\n            }\n\n            callback(newMeasurement)\n    \n            popup( {\n                title: <p>Measurement <b>{newMeasurement.name}</b> added / modified</p>,\n                footer: `Will be drawn as ${newMeasurement.renderer}`,\n                icon: 'success',\n                timer: 1500,\n                timerProgressBar: true,\n            } )\n        })\n\n    } }\n}\n\nexport default useMeasPopup;\n\n","import { FC, useEffect, useState } from \"react\";\n\nimport { RideMeta } from '../../assets/models'\n\nimport '../../css/ridedetails.css'\n\n\ntype Props = {\n    md: RideMeta,\n};\n\ntype Elt = {\n    key: string,\n    title: string,\n    value: string,\n    isSublist?: boolean\n}\n\n\nconst DATE_MD = [\n    \"StartTimeUtc\",\n    \"EndTimeUtc\"\n]\n\nconst POSITION_MD = [\n    \"StartPositionDisplay\",\n    \"EndPositionDisplay\"\n]\n\nconst BANNED_MD = [\n    \"Fully_Imported\",\n    \"Fully_RouteAnnotated\",\n    \"Description\",\n    \"ChangeLog\"\n]\n\nconst formatDate = (val: string) => {\n    const date = new Date(val)\n    return date.getDate() + '/' + date.getMonth() + '/' + date.getFullYear()\n        + '  ' + date.getHours() + ':' + date.getMinutes()\n}\n\n\n//print all necessary meta info with a map function here\nconst MetaData: FC<Props> = ( { md } ) => {\n\n    const [elts, setElts] = useState<Elt[]>([])\n\n    const getMDelt = ( { key, title, value, isSublist }: Elt) => {                \n        return <div className={`ride-metadata-elt ${isSublist ? 'sublist-elt' : ''}`} key={`metadata-${key}`}>\n            <b>{title}:</b> {value} \n        </div>\n    }\n\n    useEffect(() => {\n        const newElts: Elt[] = Object.entries(md)\n            .filter( (elt) => !BANNED_MD.includes(elt[0]) )\n            .flatMap( (elt: any, i: number) => {\n                const [title, value] = elt;\n                const key = md.TaskId + '-' + i;\n\n                if ( POSITION_MD.includes(title) )\n                {\n                    const baseElt: Elt = { key: key, title: title, value: '' };\n                    \n                    let positions: [string, any][] = [];\n                    try { positions = Object.entries(JSON.parse(value)) }\n                    catch(e) { }                    \n\n                    const mappedPos: Elt[] = positions\n                        .map( (pos: [string, any], j) => { \n                            return { key: key + '-' + j, title: pos[0], value: pos[1], isSublist: true }\n                        } )\n                    return [ baseElt, ...mappedPos];\n                }\n                else if ( DATE_MD.includes(title))\n                    return { key: key, title: title, value: formatDate(value) }\n\n                return { key: key, title: title, value: value }\n            } )\n        \n        setElts(newElts);\n    }, [md])\n\n    return (\n        <>\n        <div className=\"ride-metadata-separation\"></div>\n        <div className=\"ride-metadata-list\" >\n            { elts.map( (elt) => getMDelt(elt)) }\n        </div>\n        </>\n    )\n    \n}\n\nexport default MetaData;","\nimport axios from 'axios'\n\nexport const get = (path: string, callback: (data: any) => void): void => {\n    fetch(path)\n        .then(res => res.json())\n        .then(data => callback(data));\n}\n\nexport const post = (path: string, obj: object, callback: (data: any) => void): void => {\n    axios.get(path, {\n        params: obj\n    }).then(res => callback(res.data));\n}\n\nexport const put = (path: string, obj: object ): void => {\n    axios.put(path, {\n        params: obj\n    })\n}","\nimport { useEffect, useState } from 'react'\nimport { get, put } from '../../assets/fetch'\nimport { Measurement } from '../../assets/models'\n\t\nexport const useMeasurements = (): [Measurement[], React.Dispatch<React.SetStateAction<Measurement[]>>] => {\n\tconst [ measurements, setMeasurements ] = useState<Measurement[]>([])\n\t\n\tuseEffect( () => {\n\t\tget('/measurements', (data) => {\n\t\t\tsetMeasurements(data);\n\t\t})\n\t}, [])\n\n\treturn [measurements, setMeasurements];\n}\n\nexport const addMeasurement = (measurement: Measurement) => {\n\tput('/addmeasurement', measurement)\t\n}\n\nexport const editMeasurement = (measurement: Measurement, index: number) => {\n\tput('/editmeasurement', { measurement: measurement, index: index } )\t\n}\n\nexport default useMeasurements;","import { FC, useState } from \"react\";\nimport { FiSettings } from 'react-icons/fi'\n\nimport useMeasPopup from \"./MeasPopup\";\nimport Checkbox from \"../Checkbox\";\nimport MetaData from \"./MetaData\";\n\nimport { Measurement, RideMeta } from '../../assets/models'\nimport Renderers, { RendererName } from \"../../assets/renderers\";\n\nimport '../../css/ridedetails.css'\nimport { addMeasurement, editMeasurement } from \"../Map/Measurements\";\n\n\ntype Props = {\n\tmeasurements: Measurement[];\n\tsetMeasurements: React.Dispatch<React.SetStateAction<Measurement[]>>;\n    metas: RideMeta[];\n\tmeasurementClick: (measIndex: number, isChecked: boolean) => void;\n};\n\nconst RideDetails: FC<Props> = ( { measurements, setMeasurements, metas, measurementClick } ) => {\n\n\tconst [ addChecked, setAddChecked ] = useState<boolean>(false)\n\t\n\tconst popup = useMeasPopup()\n\n\tconst openEditMeasurement = (e: any, i: number) => {\n\t\te.preventDefault()\n\t\te.stopPropagation()\n\t\t\n\t\tconst m = measurements[i]\n\n\t\tpopup.fire( \n\t\t\t(newMeasurement: Measurement | undefined ) => {\n\t\t\t\tif ( newMeasurement === undefined ) return;\n\t\t\t\tsetMeasurements( prev => prev.map( (m: Measurement, j: number) => i === j ? newMeasurement : m ) )\n\t\t\t\teditMeasurement(newMeasurement, i)\n\t\t\t}, \n\t\t\t{ name: m.name, tag: m.queryMeasurement, renderer: m.renderer, color: m.color } \n\t\t)\n\t}\n\n\tconst getMeasurementsContent = (m: Measurement, i: number): JSX.Element => {\n\t\treturn <div className=\"checkbox-container\">\n\t\t\t<div className=\"checkbox-title\">{m.name} <p className=\"checkbox-subtitle\">- {m.renderer}</p></div>\n\t\t\t<FiSettings className=\"edit-meas-btn btn\" onClick={(e) => openEditMeasurement(e, i)} strokeWidth={1}/>\n\t\t</div>\n\t}\n\n\tconst showAddMeasurement = () => {\n\t\tsetAddChecked(true) \n\t\tpopup.fire( \n\t\t\t(newMeasurement: Measurement | undefined ) => {\n\t\t\t\tsetAddChecked(false) \n\n\t\t\t\tif ( newMeasurement === undefined ) return;\n\n\t\t\t\t// update the state in RideDetails\n\t\t\t\tsetMeasurements( prev => [...prev, newMeasurement])\n\t\t\t\t// and add the measurement to the measurements.json file\n\t\t\t\taddMeasurement(newMeasurement);\n\t\t\t},\n\t\t\t{ name: '', tag: '', renderer: RendererName.circles, color: '#bb55dd' } \n\t\t)\n\t}\n\n    return (\n\t\t<div className=\"meta-data\">\n\t\t\t{\n\t\t\t\tmeasurements.map( (m: Measurement, i: number) =>\n\t\t\t\t\t<Checkbox \n\t\t\t\t\t\tkey={`ride-md-checkbox-${i}`}\n\t\t\t\t\t\tclassName='ride-metadata-checkbox'\n\t\t\t\t\t\thtml={getMeasurementsContent(m, i)}\n\t\t\t\t\t\tonClick={(isChecked) => measurementClick(i, isChecked)} />\n\t\t\t\t)\n\t\t\t}\n\n\t\t\t<Checkbox \n\t\t\t\tclassName='ride-metadata-checkbox md-checkbox-add'\n\t\t\t\thtml={<div>+</div>}\n\t\t\t\tforceState={addChecked}\n\t\t\t\tonClick={showAddMeasurement} />\n\t\t\t\n\t\t\t\n\t\t\t{ metas.map( (meta: RideMeta, i: number) =>\n\t\t\t\t<MetaData md={meta} key={`ride-md-${meta.TaskId}-${i}`}></MetaData>\n\t\t\t) }\n        </div>\n  )\n}\n\nexport default RideDetails;","import { FC, useEffect, useState } from 'react' \nimport { default as ApexChart } from \"react-apexcharts\";\nimport { ChartData, ChartPoint } from '../../assets/models';\n\nexport type ChartAddFunc = (dataName: string, data: ChartData) => void\nexport type ChartRemFunc = (dataName: string) => void\n\ninterface Props {\n    setAddChartData: React.Dispatch<React.SetStateAction<ChartAddFunc>>;\n    setRemChartData: React.Dispatch<React.SetStateAction<ChartRemFunc>>;\n}\n\nconst Chart: FC<Props> = ( { setAddChartData, setRemChartData } ) => {\n    const [series, setSeries] = useState<any[]>([])\n\n\n    const addChartData = (dataName: string, data: ChartData) => { \n        console.log('adding ' + dataName);\n        \n        const MAX_NB_POINTS = 5_000\n        const threshold = Math.ceil(data.length / MAX_NB_POINTS)\n        const chartData = data.filter((val: ChartPoint, i: number) => i % threshold === 0 )\n\n        const updated = [...series]\n        updated.push( { name: dataName, data: chartData } )\n        setSeries( updated )\n    }\n\n    const removeChartData = (dataName: string) => {\n        const updated = [...series].filter((p: any) => p.name !== dataName )        \n        setSeries(updated)\n    }\n\n    useEffect( () => {\n        console.log('before');\n        \n        setAddChartData(() => addChartData)\n        setRemChartData(() => removeChartData)\n        console.log('after');\n        \n    }, [])\n\n    const options = {\n        chart: {\n            id: \"basic-bar\",\n            animations: {\n                enabled: false,\n            }\n        },\n        stroke: {\n            width: 3,\n            curve: \"smooth\" as any\n        },\n        toolTip: {\n            shared: true\n        },\n        xaxis: {\n            type: 'number' as any,\n            position: 'bottom',\n            tickAmount: 10,\n            labels: {\n                formatter: (value: string, timestamp?: number, opts?:any) => {\n                    const date = new Date(Math.round(Number.parseFloat(value)))\n                    const time = date.getHours() + \"h\" + date.getMinutes();\n                    return time;\n                }\n            }\n        },\n        theme: {\n            mode: 'dark' as any, \n            palette: 'palette1' as any\n        }\n    }\n\n    \n    return (\n        <div className=\"chart-wrapper\">\n            <ApexChart \n                options={options}\n                series={series}\n                type=\"line\"\n                height={'100%'} />\n        </div> \n    )\n}\n\n\nexport default Chart;      ","\nimport { FC, useState } from \"react\";\n\n\nimport { EventRenderer, PathProps } from '../../assets/models'\nimport { Marker, Popup } from \"react-leaflet\";\nimport renderers from \"../../assets/renderers\";\n\n\nconst parseMD = (mds: any) => {\n    console.log(mds, typeof mds === 'object');\n    \n    if ( typeof mds === 'object' && Array.isArray(mds) )\n    {\n        return <div key={`md-${Math.random()}`}>{mds.map(md => parseMD(md)).join(', ')}</div>\n    }\n    else if ( typeof mds === 'object' )\n    {\n        return Object.keys(mds).map(k => \n            <div key={`md-${Math.random()}`}> {' > '} {k}: {parseMD(mds[k])}</div>\n        )\n    }\n\n    return mds\n}\n\nconst getPopupLine = (key: string, value: any) => {\n    if ( value === undefined || value === null )\n        return <></>\n\n    else if ( typeof value === 'object' )\n        return <div key={`popupline-${Math.random()}`}>{key}:{parseMD(value)}</div>\n    \n    return <div key={`popupline-${Math.random()}`}>{key}: {value}</div>\n}\n\nconst EventPath: FC<PathProps> = ( { path, properties, metadata } ) => {\n\n    const [markerPos, setMarkerPos] = useState<[number, number]>([0, 0]);\n    const [selected, setSelected] = useState<number | undefined>(undefined);\n\n    const md = metadata || {}\n    const EventRenderer = renderers[properties.renderer] as EventRenderer\n\n    const onClick = (i: number) => (e: any) => {\n        const { lat, lng } = e.latlng\n        setMarkerPos([lat, lng])\n        setSelected(i)\n    }\n    \n    const point = path.data[selected || 0]\n    \n    return ( <> \n        <EventRenderer \n            path={path} \n            properties={properties} \n            onClick={onClick} \n        />\n        { selected !== undefined && \n            <Marker position={markerPos}>\n                <Popup>\n                    { getPopupLine('Properties', properties) }\n                    { getPopupLine('Value', point.value) }\n                    { getPopupLine('Timestamp', point.timestamp) }\n                    { Object.keys(point.metadata || {}).map(key => getPopupLine(key, point.metadata[key]))}\n                    { Object.keys(md).map(key => getPopupLine(key, md[key]))}\n                </Popup>\n            </Marker> \n        }\n    </> )\n}\n\nexport default EventPath;\n","\r\nimport { FC, useState, useEffect } from \"react\";\r\nimport { useMapEvents } from 'react-leaflet'\r\nimport { LatLng } from 'leaflet'\r\n\r\nimport EventPath from \"./EventPath\";\r\nimport usePopup from '../Popup'\r\n\r\nimport { RideData, PathModel, ChartData, Measurement } from '../../assets/models'\r\nimport { post } from '../../assets/fetch'\r\n\r\nimport '../../css/road.css'\r\n\r\nconst getEmptyPath = (): PathModel => {\r\n    return {\r\n        loaded: false,\r\n        path: { data: [] },\r\n        fullPath: undefined,\r\n    }\r\n}\r\n\r\nconst ZOOMS: {[key: number]: number}= {\r\n    12: 3_000,\r\n    13: 5_000,\r\n    14: 30_000,\r\n    15: 35_000,\r\n    16: 30_000,\r\n}\r\n\r\ninterface Request {\r\n    type: string;\r\n    minLength: number;\r\n    bounds: object;\r\n}\r\n\r\ninterface Props {\r\n    measurements: Measurement[], \r\n    activeMeasurements: number[], \r\n    tripId: string, \r\n    taskId: number, \r\n    addChartData: (dataName: string, data: ChartData) => void,\r\n    removeChartData: (dataName: string) => void\r\n}\r\n \r\nconst Ride: FC<Props> = ( { measurements, activeMeasurements, tripId, taskId, addChartData, removeChartData } ) => {\r\n    \r\n    const [paths, setPaths] = useState<PathModel[]>(measurements.map(getEmptyPath))  \r\n    const [request, setRequest] = useState<Request | undefined>(undefined)\r\n\r\n    const popup = usePopup()\r\n    \r\n    const map = useMapEvents({\r\n        zoom: (e: any) => {\r\n            pushRequestForAll()\r\n        },\r\n        dragend: (e: any) => {            \r\n            pushRequestForAll()\r\n        }\r\n    })\r\n\r\n    const worker = new Worker('/thread.worker.js');    \r\n\r\n    const submitWork = (type: string, minLength: number, bounds: object, paths: PathModel[] | undefined, path: RideData | undefined, i: number | undefined ) => {\r\n        worker.postMessage( { type: type, minLength: minLength, bounds: bounds, paths: paths, path: path, i: i } );\r\n    }\r\n\r\n    const pushRequest = (type: string, paths: PathModel[] | undefined, path: RideData | undefined, i: number | undefined ) => {\r\n        const req: Request = { type: type, minLength: getMinLength(), bounds: getMapBounds() }\r\n        \r\n        if ( request === undefined )\r\n            submitWork(req.type, req.minLength, req.bounds, paths, path, i)\r\n        else\r\n        {\r\n            setRequest(req)\r\n            console.log('Queue request');\r\n        }\r\n    }\r\n\r\n    const pushRequestForOne = (path: RideData, i: number) => {\r\n        pushRequest( 'ONE', undefined, path, i )\r\n    }\r\n\r\n    const pushRequestForAll = () => {\r\n        pushRequest( 'ALL', [...paths], undefined, undefined )\r\n    }\r\n    \r\n    const getMapBounds = () => {\r\n        const bounds = map.getBounds();\r\n        return [bounds.getNorthWest(), bounds.getSouthEast()]\r\n    }\r\n    \r\n    const getMinLength = () => {\r\n        const [northWest, southEast] = getMapBounds();\r\n    \r\n        let deltaLat = northWest.lat - southEast.lat\r\n        let deltaLng = southEast.lng - northWest.lng;\r\n        const mappedZoom = Math.min(Math.max(map.getZoom(), 12), 16)\r\n        const precision = ZOOMS[mappedZoom];\r\n        \r\n        return Math.sqrt( deltaLat * deltaLat + deltaLng * deltaLng ) / precision;\r\n    }\r\n\r\n\r\n    \r\n    const getDataName = (measurement: Measurement): string => {\r\n        return taskId.toString()\r\n    }\r\n\r\n    useEffect(() => {      \r\n        worker.onmessage = ( { data: { type, pathsCopy, path, performancePath, index } }: any ) => {\r\n            if ( type === 'ONE' )\r\n            {                \r\n                const pathsCp = [...paths]\r\n                const newPath: PathModel = {\r\n                    loaded: true,\r\n                    path: performancePath,\r\n                    fullPath: path\r\n                }\r\n\r\n                if ( index < paths.length )\r\n                    pathsCp[index] = newPath\r\n                else\r\n                    pathsCp.push( newPath )\r\n\r\n                setPaths(pathsCp)\r\n            }\r\n            else if ( type === 'ALL') {\r\n                setPaths(pathsCopy);\r\n            }\r\n\r\n            if ( request )\r\n            {                \r\n                if ( request.type === 'ONE' )\r\n                    submitWork(request.type, request.minLength, request.bounds, undefined, undefined, undefined )\r\n                else if ( request.type === 'ALL' )\r\n                    submitWork(request.type, request.minLength, request.bounds, [...paths], undefined, undefined )\r\n            }\r\n        };\r\n    }, [worker]);\r\n\r\n    const requestMeasurement = ( measIndex: number ) => {     \r\n        if ( paths[measIndex] !== undefined && paths[measIndex].loaded ) return;\r\n\r\n        const meas: Measurement = measurements[measIndex]\r\n        \r\n        post( meas.query, { tripID: tripId, measurement: meas.queryMeasurement }, (res: any) => {            \r\n            const latLngData = res.data.map( (d: any) => { \r\n                return { pos: new LatLng(d.pos.lat, d.pos.lon), value: d.value, timestamp: d.timestamp } \r\n            } )\r\n            const { minValue, maxValue, minTime, maxTime } = res;\r\n            const path: RideData = { data: latLngData, minValue, maxValue, minTime, maxTime }\r\n            \r\n            pushRequestForOne( path, measIndex )\r\n\r\n            console.log(\"Got data for ride: \", tripId, \", length: \", latLngData.length); \r\n            console.log(\"Min value\", minValue, \"Max Value\", maxValue);\r\n            console.log(\"Min time\", minTime, \"Max Time\", maxTime);\r\n\r\n            if ( meas.value )\r\n            {\r\n                if ( path.data.length === 0 )\r\n                    return popup({\r\n                        icon: \"warning\",\r\n                        title: `This trip doesn't contain data for ${meas.name}`,\r\n                        footer: `TripId: ${tripId} | TaskId: ${taskId}`\r\n                    } );\r\n\r\n                const min = path.data[0].timestamp || 0                \r\n                addChartData( getDataName(meas), res.data.map( (d: any) => { \r\n                    return { x: d.timestamp as number - (min as number), y: d.value as number } \r\n                } ) )\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n    useEffect( () => {    \r\n        // when adding a new measurement                \r\n        if ( measurements.length > paths.length )\r\n            requestMeasurement(paths.length)\r\n                  \r\n        paths.forEach( (p: any, k: number) => {\r\n            const include = activeMeasurements.includes(k)\r\n            \r\n            // load\r\n            if ( include && !paths[k].loaded )\r\n                requestMeasurement(k)\r\n                \r\n            // unload\r\n            else if ( !include && paths[k].loaded )\r\n            {\r\n                const pathsCopy: any = [...paths]\r\n                pathsCopy[k].loaded = false;\r\n                pathsCopy[k].path = undefined;\r\n                pathsCopy[k].fullPath = undefined;\r\n                setPaths(pathsCopy)\r\n\r\n                removeChartData( getDataName(measurements[k]) )\r\n            }\r\n        })        \r\n    }, [measurements, activeMeasurements, paths] );\r\n\r\n\r\n    return (\r\n        <>\r\n        {\r\n            paths\r\n            .filter( p => p.loaded )\r\n            .map( (p,i) => \r\n                <EventPath \r\n                    key={`path${Math.random()}`} \r\n                    path={p.path} \r\n                    properties={measurements[activeMeasurements[i]]}/> \r\n            )\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ride;","import { useMapEvents } from \"react-leaflet\"\n\n\n\nconst MapEvents = () => {\n    useMapEvents({\n        click: (e) => console.log(e.latlng)\n    })\n\n    return <></>\n}\n\nexport default MapEvents;","\r\nimport { MapContainer, TileLayer } from 'react-leaflet'\r\n\r\nimport '../../css/map.css'\r\nimport MapEvents from './MapEvents';\r\n\r\n\r\nconst MapWrapper = ( props : any ) => { \r\n\r\n\tconst { children } = props;\r\n\t\r\n\treturn (\r\n\t\t<MapContainer \r\n\t\t\tpreferCanvas={true}\r\n\t\t\tcenter={[55.6720619937223, 12.558746337890627]} \r\n\t\t\tzoom={11} \r\n\t\t\tscrollWheelZoom={true}>\r\n\t\t\t<TileLayer\r\n\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t/>\r\n\t\t\t<MapEvents />\r\n\t\t\t{ children }\r\n\t\t</MapContainer>\r\n  \t)\r\n}\r\n\r\nexport default MapWrapper;\r\n","import { FC, useEffect, useState } from \"react\";\r\n\r\nimport RideCards from \"./RideCards\";\r\nimport RideDetails from \"./RideDetails\";\r\nimport Chart, { ChartAddFunc, ChartRemFunc } from \"./Chart\";\r\n\r\nimport Ride from \"../Map/Ride\";\r\nimport { RideMeta } from '../../assets/models'\r\nimport useMeasurements from \"../Map/Measurements\";\r\nimport MapWrapper from \"../Map/MapWrapper\";\r\n\r\nimport '../../css/rides.css'\r\nimport { get } from \"../../assets/fetch\";\r\n\r\n\r\nconst Rides: FC = () => {\r\n    const [ measurements, setMeasurements ] = useMeasurements();\r\n    const [ activeMeasurements, setActiveMeasurements ] = useState<number[]>([]);\r\n    const [ metas, setMetas ] = useState<RideMeta[]>([]);\r\n    const [ selectedRides, setSelectedRides ] = useState<number[]>([]);\r\n\r\n    const [addChartData, setAddChartData] = useState<ChartAddFunc>(() => {});\r\n    const [remChartData, setRemChartData] = useState<ChartRemFunc>(() => {});\r\n\r\n    // fetch the metadata of all the rides\r\n    useEffect( () => {\r\n        get( '/rides', (data: any) => setMetas(data.filter((d: RideMeta) => d.TaskId !== 0 )) )\r\n    }, [] );\r\n\r\n    function changeMetas(value: any){\r\n        setMetas(value);\r\n    }\r\n\r\n    const showRide = (i: number, isChecked: boolean) => {   \r\n        if ( isChecked )      \r\n            setSelectedRides( prev => [...prev, i] ) \r\n        else\r\n        {\r\n            let removed = 0;\r\n            setSelectedRides( selectedRides.filter(r => { \r\n                if ( r === i )\r\n                    removed = i;\r\n                return r !== i\r\n            } ) ) \r\n\r\n            remChartData(metas[removed].TaskId.toString())\r\n        } \r\n    }\r\n\r\n    const measurementClicked = (measurement: number, isChecked: boolean) => {        \r\n        isChecked \r\n            ? setActiveMeasurements( prev => [...prev, measurement])\r\n            : setActiveMeasurements( prev => prev.filter(value => value !== measurement))\r\n    }\r\n\r\n    return (\r\n        <div className=\"rides-wrapper\">\r\n            <RideCards metas={metas} onClick={showRide}/>\r\n            \r\n            <RideDetails \r\n                measurements={measurements} setMeasurements={setMeasurements} measurementClick={measurementClicked}\r\n                metas={selectedRides.map(i => metas[i])} />\r\n            \r\n            <div className=\"map-container\">\r\n                <MapWrapper>\r\n                    {\r\n                        metas\r\n                            .filter( (meta: RideMeta, i: number) => selectedRides.includes(i) )\r\n                            .flatMap( (meta: RideMeta) => {\r\n                                return <Ride\r\n                                    key={`Ride${Math.random()}`}\r\n                                    measurements={measurements}\r\n                                    activeMeasurements={activeMeasurements}\r\n                                    tripId={meta.TripId}\r\n                                    taskId={meta.TaskId}\r\n                                    addChartData={addChartData}\r\n                                    removeChartData={remChartData} />\r\n                            } )\r\n                    }\r\n                </MapWrapper>\r\n                    \r\n                <Chart \r\n                    setAddChartData={setAddChartData}\r\n                    setRemChartData={setRemChartData}\r\n                    />\r\n            </div>\r\n      </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Rides;\r\n","import { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { post } from '../../assets/fetch'\nimport '../../css/signUpForm.css';\n\ninterface State {\n    username : string,\n    email : string,\n    password : string,\n  }\n\nconst SignUpForm = () => \n{ \n    const [ state, setState ] = useState<State>({\n        username : \"\",\n        email : \"\",\n        password :\"\",\n    });\n    \n    const handleChange = (event : any) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n        setState(prevState => ({\n            ...prevState,\n            [name]: value,\n        }))\n    }\n    \n    \n    let history = useHistory();\n     \n    const redirect = () => {\n        post('/login', state, (data) => {\n            if ( data.status === \"ok\")\n                history.push(\"/rides\");\n        })\n    }\n\n    return (\n        <div className='signup-wrapper'>\n            <h2>Sign Up</h2>\n            <div>\n                <div className='signup-input-container'>\n                    <label htmlFor=\"username\">Username</label>\n                    <input type='text' name='username' onChange={handleChange} />\n                </div>\n                <div className='signup-input-container'>\n                    <label htmlFor=\"email\">Email</label>\n                    <input type='email' name='email' onChange={handleChange} />\n                    \n                </div>\n                <div className='signup-input-container'>\n                    <label htmlFor=\"password\">Password</label>\n                    <input type='password' name='password' onChange={handleChange}/>\n                    \n                </div>\n                <div className='btn signup-btn' onClick={redirect}>Register Me</div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default SignUpForm;\n","import { FC, useState, useEffect } from \"react\";\nimport { Circle, MapContainer, TileLayer, useMapEvent,  } from 'react-leaflet'\n\nimport '../../../../css/rides.css'\nimport { isPropertySignature } from \"typescript\";\n\ninterface MeasurementProps {\n    lat: number,\n    lon: number,\n    message:string \n}\n\nconst Measurement: FC<MeasurementProps> = (props) => {\n\n    const getColor = (val: number, maxval: number, minval: number): string => {\n\n        if(val == undefined)\n            return `rgb(0, 0, 0)`\n\n        if(val > maxval)\n            val = maxval;\n        else if(val < minval)\n            val = minval;\n\n        val = (val - minval) * (1/(maxval-minval));\n\n        const green: number = Math.min(val * 2, 1) * 255;\n        const red: number = (val < 0.5 ? val +  0.5 : 2 - val * 2) * 255;                 \n        return `rgb(${Math.round(red)}, ${Math.round(green)}, 0)`\n    }\n\n    const getValue = () => {\n\n        const message: string = props.message;\n\n        if(JSON.parse(message)[\"obd.trac_cons.value\"] != null) \n            console.log(JSON.parse(message)[\"obd.trac_cons.value\"])\n\n        return JSON.parse(message)[\"obd.trac_cons.value\"];\n    }\n\n\n    return <Circle \n        center={[props.lat, props.lon]} \n        radius={5}\n        color={getColor(getValue(), 200, 140)} />\n}\n\nexport default Measurement;","import { FC, useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, useMapEvent,  } from 'react-leaflet'\n\nimport '../../../../css/rides.css'\nimport { isPropertySignature } from \"typescript\";\nimport Measurement from './Measurement'\nimport {MeasurementData} from '../../../../assets/models';\n\ninterface MeasurementsProps {\n    measurements: MeasurementData[] \n}\n\nconst Measurements: FC<MeasurementsProps> = (props) => {\n    return (\n        <div>\n            { props.measurements.map( (data: MeasurementData, i: number) =>      \n                <Measurement key={`measurement-${i}`} lat={data.lat} lon={data.lon} message={data.message}/>\n            )}\n        </div>\n  )\n}\n\nexport default Measurements;","import { FC, useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, useMapEvents,  } from 'react-leaflet';\nimport {MeasurementData} from '../../../../assets/models';\n\ninterface MapEventsProps {\n    setMeasurements: (measurements: MeasurementData[]) => void;\n}\n\nconst MapEvents: FC<MapEventsProps> = (props) => {\n\n    let latestZoom = 18;\n    let maxrendered = 100;\n\n    const map = useMapEvents({\n        async zoomend() {\n\n            console.log(\"Current zoom \" + map.getZoom());\n            console.log(\"Latest zoom \" + latestZoom);\n            console.log(\"Maximum rendered zoom \" + maxrendered);\n\n            if(map.getZoom() > latestZoom || (map.getZoom() >= maxrendered)){\n                return;\n            }\n\n            maxrendered = map.getZoom();            \n                        \n            const bounds = map.getBounds();\n            const southWest = bounds.getSouthWest();\n            const northEast = bounds.getNorthEast();\n\n            let maxlon = northEast.lng;\n            let maxlat = northEast.lat;\n            let minlon = southWest.lng;\n            let minlat = southWest.lat;\n\n            let path = '/measurements?T=obd.trac_cons'+\n                '&maxlon='+ maxlon +\n                '&maxlat='+ maxlat +\n                '&minlon=' + minlon +\n                '&minlat=' + minlat;\n\n            console.log(path);\n            fetch(path)\n                .then(response => response.json())\n                .then(data => {\n                    const measurements: MeasurementData[] = data;\n                    console.log(measurements);\n                    props.setMeasurements(measurements);\n                });\n        },\n        zoomstart() {\n          latestZoom = map.getZoom();\n\n          if(map.getZoom() < maxrendered)\n            maxrendered = latestZoom;\n        },\n      })\n\n    return null\n  }\n\n\n  export default MapEvents;","import { FC, useState } from \"react\";\nimport { MapContainer, TileLayer } from 'react-leaflet'\n\nimport Measurements from \"./Measurements\";\nimport MapEvents from \"./MapEvents\"\n\nimport { MeasurementData } from '../../../../assets/models';\n\nimport '../../../../css/rides.css'\n\nconst Map: FC = () => {\n\n    const [ measurements, setMeasurements ] = useState<MeasurementData[]>([]);\n\n    \n    return (\n        <div className=\"rides-wrapper\">\n            <div className=\"map-container\">\n                <MapContainer\n                    preferCanvas={true}\n                    center={[55.6720619937223, 12.558746337890627]} \n                    zoom={18} \n                    scrollWheelZoom={true}>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    <MapEvents setMeasurements = {setMeasurements} ></MapEvents>\n                    <Measurements measurements = {measurements}></Measurements>\n                </MapContainer>\n            </div>\n      </div>\n    \n  )\n}\n\nexport default Map;\n","import { FC, useState, useEffect } from \"react\";\nimport { MapContainer, TileLayer, useMapEvent,  } from 'react-leaflet'\nimport Map from \"./Map/Map\";\n\nimport { isPropertySignature } from \"typescript\";\n\n\nconst LiRAMain: FC = () => {\n\n    return (\n        <Map>\n\n        </Map>\n  )\n}\n\nexport default LiRAMain;","import { FC, useEffect, useState } from \"react\";\n\nimport MapWrapper from \"../Map/MapWrapper\";\nimport EventPath from \"../Map/EventPath\";\nimport Checkbox from \"../Checkbox\";\n\nimport { PathProps } from \"../../assets/models\";\n\nimport \"../../css/ml.css\";\n\nconst brokerURL = \"ws://localhost:3001/ws\"\n\ntype PathsMap = {[key: string]: PathProps}\n\nconst range = (n: number): boolean[] => { \n    return Array.from( {length: n}, (elt, i) => true);\n}\n\nconst ML: FC = () => {\n    const [paths, setPaths] = useState<PathsMap>({});\n    const [selectedPaths, setSelectedPaths] = useState<boolean[]>([])\n\n    useEffect(() => {\n        const ws = new WebSocket(brokerURL);\n\n        ws.onopen =  () => {\n            console.log('open');\n            ws.send('something');\n        };\n\n        ws.onmessage = payload => {\n            const { type, filename, data } = JSON.parse(payload.data);\n            console.log('received:', type, filename, data);\n            \n            if ( type === 'rename' || type === 'change' )\n            {\n                console.log(typeof data);\n                \n                // const pathProps = typeof data === 'string' ? JSON.parse(data) : data\n                const tripName = filename.replace('.json', '')\n                \n                const temp = { ...paths, [tripName]: data }\n                console.log(paths);\n                \n                console.log(temp)\n                setPaths(temp);\n            }\n            else if ( type === 'deleted' )\n            {\n                const temp = { ...paths }\n                const tripName = filename.replace('.json', '')\n                delete temp[tripName];\n                setPaths(temp)\n            }\n            else if ( type === 'CONNECTED' )\n            {\n                setSelectedPaths(range(data.length))\n\n                const temp: any = {}\n                for ( const file of data )\n                {\n                    const tripName = file.filename.replace('.json', '')\n                    temp[tripName] = file.data;\n                }\n                setPaths(temp);\n                console.log(temp);\n            }\n        };\n    }, [])\n\n    const onClick = (i: number) => () => {\n        const temp = [...selectedPaths]\n        temp[i] = !temp[i]\n        setSelectedPaths(temp)\n    }\n\n    return (\n        <div className=\"ml-wrapper\">\n            <MapWrapper>\n                { Object.keys(paths)\n                    .map( (k, i) => selectedPaths[i] \n                        ? <EventPath \n                            key={`ml-path-${i}`}\n                            path={paths[k].path}\n                            properties={paths[k].properties}\n                            metadata={paths[k].metadata} /> \n                        : <></>) \n                }\n            </MapWrapper>\n            <div className=\"ml-checkboxes\">\n                { Object.keys(paths).map( (filename, i) => \n                    <Checkbox \n                        key={`ml-${i}`} \n                        forceState={selectedPaths[i]}\n                        className=\"btn ml-checkbox\" \n                        html={<div>{filename}</div>} \n                        onClick={onClick(i)}/>\n                ) }\n            </div>\n        </div>\n    );\n}\n\nexport default ML;","import { FC } from \"react\";\nimport { BrowserRouter as Router, Route, Switch  } from 'react-router-dom';\n\nimport Navbar from './Components/Navbar'\nimport Rides from './Components/Rides/Rides'\nimport SignUpForm from './Components/Login/SignUpForm'\nimport LiRAMain from './Components/Pages/LiraMain/LiRAMain'\nimport ML from \"./Components/Machine/ML\";\n\nimport \"./App.css\";\n\n\n\nconst App: FC = () => {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Navbar />\n                <Switch>\n                    <Route exact path=\"/\" component={() => <LiRAMain />} />\n                    <Route exact path=\"/rides\" component={() => <Rides />} />\n                    <Route exact path=\"/ml\"    component={() => <ML />} />\n                    <Route exact path=\"/login\" component={() => <SignUpForm />} />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}